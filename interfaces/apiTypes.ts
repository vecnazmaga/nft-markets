/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/attributes": {
    get: operations["getAttributes"];
  };
  "/collections": {
    get: operations["getCollections"];
  };
  "/market": {
    get: operations["getMarket"];
  };
  "/orders": {
    get: operations["getOrders"];
    post: operations["postOrders"];
  };
  "/owners": {
    get: operations["getOwners"];
  };
  "/stats": {
    get: operations["getStats"];
  };
  "/tokens": {
    get: operations["getTokens"];
  };
  "/transfers": {
    get: operations["getTransfers"];
  };
  "/collections/{collection}": {
    get: operations["getCollectionsCollection"];
  };
  "/orders/build": {
    get: operations["getOrdersBuild"];
  };
  "/orders/fill": {
    get: operations["getOrdersFill"];
  };
  "/tokens/details": {
    get: operations["getTokensDetails"];
  };
  "/tokens/floor": {
    get: operations["getTokensFloor"];
  };
  "/collections/{collection}/attributes": {
    get: operations["getCollectionsCollectionAttributes"];
  };
  "/users/{user}/collections": {
    get: operations["getUsersUserCollections"];
  };
  "/users/{user}/positions": {
    get: operations["getUsersUserPositions"];
  };
  "/users/{user}/tokens": {
    get: operations["getUsersUserTokens"];
  };
  "/attributes/refresh": {
    post: operations["postAttributesRefresh"];
  };
  "/admin/fix/cache": {
    post: operations["postAdminFixCache"];
  };
  "/admin/index/metadata": {
    post: operations["postAdminIndexMetadata"];
  };
  "/admin/sync/events": {
    post: operations["postAdminSyncEvents"];
  };
}

export interface definitions {
  Model1: {
    value?: string;
    count?: number;
  };
  values: definitions["Model1"][];
  Model2: {
    key?: string;
    kind?: string;
    values?: definitions["values"];
  };
  attributes: definitions["Model2"][];
  getAttributesResponse: {
    attributes?: definitions["attributes"];
  };
  collection: {
    id?: string;
    name?: string;
    description?: string;
    image?: string;
  };
  royalties: {
    recipient?: string;
    bps?: number;
  };
  sampleImages: string[];
  token: {
    contract?: string;
    tokenId?: string;
    name?: string;
    image?: string;
  };
  floorSell: {
    hash?: string;
    value?: number;
    maker?: string;
    validFrom?: number;
    validUntil?: number;
    token?: definitions["token"];
  };
  topBuy: {
    hash?: string;
    value?: number;
    maker?: string;
    validFrom?: number;
    validUntil?: number;
  };
  market: {
    floorSell?: definitions["floorSell"];
    topBuy?: definitions["topBuy"];
  };
  set: {
    tokenCount?: number;
    onSaleCount?: number;
    sampleImages?: definitions["sampleImages"];
    market?: definitions["market"];
  };
  Model3: {
    collection?: definitions["collection"];
    royalties?: definitions["royalties"];
    set?: definitions["set"];
  };
  collections: definitions["Model3"][];
  getCollectionsResponse: {
    collections?: definitions["collections"];
  };
  Model4: {
    value: number;
    quantity: number;
  };
  buys: definitions["Model4"][];
  Model5: {
    buys?: definitions["buys"];
    sells?: definitions["buys"];
  };
  Model6: {
    market?: definitions["Model5"];
  };
  data: { [key: string]: unknown };
  tokenSetLabel: {
    data?: definitions["data"];
    kind?: string;
  };
  sourceInfo: {
    id?: string;
    bps?: number;
  };
  royaltyInfo: definitions["royalties"][];
  Model7: {
    hash?: string;
    status?: string;
    tokenSetId?: string;
    tokenSetLabel?: definitions["tokenSetLabel"];
    kind?: string;
    side?: string;
    maker?: string;
    price?: number;
    value?: number;
    validFrom?: number;
    validUntil?: number;
    sourceInfo?: definitions["sourceInfo"];
    royaltyInfo?: definitions["royaltyInfo"];
    rawData?: definitions["data"];
  };
  orders: definitions["Model7"][];
  getOrdersResponse: {
    orders?: definitions["orders"];
  };
  ownership: {
    tokenCount?: number;
    onSaleCount?: number;
    floorSellValue?: number;
    topBuyValue?: number;
    totalBuyValue?: number;
    lastAcquiredAt?: number;
  };
  Model8: {
    address?: string;
    ownership?: definitions["ownership"];
  };
  owners: definitions["Model8"][];
  getOwnersResponse: {
    owners?: definitions["owners"];
  };
  getStatsResponse: {
    stats?: definitions["set"];
  };
  Model9: {
    id?: string;
    name?: string;
  };
  Model10: {
    contract?: string;
    name?: string;
    image?: string;
    tokenId?: string;
    collection?: definitions["Model9"];
    topBuyValue?: number;
    floorSellValue?: number;
  };
  tokens: definitions["Model10"][];
  getTokensResponse: {
    tokens?: definitions["tokens"];
  };
  Model11: {
    contract?: string;
    kind?: string;
    name?: string;
    image?: string;
    tokenId?: string;
    collection?: definitions["Model9"];
  };
  Model12: {
    token?: definitions["Model11"];
    from?: string;
    to?: string;
    amount?: number;
    txHash?: string;
    block?: number;
    timestamp?: number;
    price?: number;
  };
  transfers: definitions["Model12"][];
  getTransfersResponse: {
    transfers?: definitions["transfers"];
  };
  lastBuy: {
    value?: number;
    timestamp?: number;
  };
  Model13: {
    id?: string;
    name?: string;
    description?: string;
    image?: string;
    lastBuy?: definitions["lastBuy"];
    lastSell?: definitions["lastBuy"];
  };
  Model14: {
    collection?: definitions["Model13"];
    royalties?: definitions["royalties"];
    set?: definitions["set"];
  };
  getCollectionResponse: {
    collection?: definitions["Model14"];
  };
  params: {
    exchange: string;
    maker: string;
    taker: string;
    makerRelayerFee: number;
    takerRelayerFee: number;
    feeRecipient: string;
    side: 0 | 1;
    saleKind: 0 | 1;
    target: string;
    howToCall: 0 | 1;
    calldata: string;
    replacementPattern: string;
    staticTarget: string;
    staticExtradata: string;
    paymentToken: string;
    basePrice: string;
    extra: string;
    listingTime: number;
    expirationTime: number;
    salt: string;
    v: number;
    r: string;
    s: string;
  };
  order: {
    params?: definitions["params"];
  };
  getOrdersBuildResponse: {
    order?: definitions["order"];
  };
  Model15: {
    params?: definitions["params"];
    buildMatchingArgs?: definitions["sampleImages"];
  };
  getOrdersFillResponse: {
    order?: definitions["Model15"];
  };
  Model16: {
    key?: string;
    value?: string;
  };
  Model17: definitions["Model16"][];
  Model18: {
    contract?: string;
    kind?: string;
    name?: string;
    description?: string;
    image?: string;
    tokenId?: string;
    collection?: definitions["Model9"];
    lastBuy?: definitions["lastBuy"];
    lastSell?: definitions["lastBuy"];
    owner?: string;
    attributes?: definitions["Model17"];
  };
  Model19: {
    token?: definitions["Model18"];
    market?: definitions["market"];
  };
  Model20: definitions["Model19"][];
  getTokensDetailsResponse: {
    tokens?: definitions["Model20"];
  };
  getTokensFloorResponse: {
    tokens?: {
      string?: number;
    };
  };
  Model21: {
    key?: string;
    value?: string;
    set?: definitions["set"];
  };
  Model22: definitions["Model21"][];
  getCollectionAttributesResponse: {
    attributes?: definitions["Model22"];
  };
  Model23: {
    collection?: definitions["Model9"];
    ownership?: definitions["ownership"];
  };
  Model24: definitions["Model23"][];
  getUserCollectionsResponse: {
    collections?: definitions["Model24"];
  };
  Model25: {
    id?: string;
    schema?: string;
    image?: string;
    floorSellValue?: number;
    topBuyValue?: number;
  };
  primaryOrder: {
    value?: number;
    expiry?: number;
    status?: string;
  };
  Model26: {
    set?: definitions["Model25"];
    primaryOrder?: definitions["primaryOrder"];
    totalValid?: number;
  };
  positions: definitions["Model26"][];
  getUserPositionsResponse: {
    positions?: definitions["positions"];
  };
  Model27: {
    token?: definitions["Model11"];
    ownership?: definitions["ownership"];
  };
  Model28: definitions["Model27"][];
  getUserTokensResponse: {
    tokens?: definitions["Model28"];
  };
  Model29: {
    kind: "wyvern-v2";
    data?: definitions["data"];
  };
  Model30: definitions["Model29"][];
  Model31: {
    orders?: definitions["Model30"];
  };
  contracts: string[];
  Model32: {
    kind?: "tokens-floor-sell" | "tokens-top-buy";
    contracts?: definitions["contracts"];
  };
  Model33: {
    collection: string;
  };
  Model34: string[];
  Model35: {
    contractKind: "orderbook" | "erc20" | "erc721" | "erc1155" | "wyvern-v2";
    contracts: definitions["Model34"];
    fromBlock: number;
    toBlock: number;
    blocksPerBatch?: number;
  };
}

export interface operations {
  getAttributes: {
    parameters: {
      query: {
        collection: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getAttributesResponse"];
      };
    };
  };
  getCollections: {
    parameters: {
      query: {
        community?: string;
        collection?: string;
        name?: string;
        sortBy?: "id" | "floorCap";
        sortDirection?: "asc" | "desc";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionsResponse"];
      };
    };
  };
  getMarket: {
    parameters: {
      query: {
        contract?: string;
        tokenId?: string;
        collection?: string;
        attributes?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["Model6"];
      };
    };
  };
  getOrders: {
    parameters: {
      query: {
        contract?: string;
        tokenId?: string;
        collection?: string;
        maker?: string;
        hash?: string;
        includeInvalid?: boolean;
        side?: "sell" | "buy";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersResponse"];
      };
    };
  };
  postOrders: {
    parameters: {
      body: {
        body?: definitions["Model31"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  getOwners: {
    parameters: {
      query: {
        contract?: string;
        tokenId?: string;
        collection?: string;
        owner?: string;
        attributes?: string;
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOwnersResponse"];
      };
    };
  };
  getStats: {
    parameters: {
      query: {
        contract?: string;
        tokenId?: string;
        collection?: string;
        attributes?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getStatsResponse"];
      };
    };
  };
  getTokens: {
    parameters: {
      query: {
        contract?: string;
        tokenId?: string;
        collection?: string;
        attributes?: string;
        tokenSetId?: string;
        onSale?: boolean;
        sortBy?: "tokenId" | "floorSellValue" | "topBuyValue";
        sortByAttribute?: string;
        sortDirection?: "asc" | "desc";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensResponse"];
      };
    };
  };
  getTransfers: {
    parameters: {
      query: {
        contract?: string;
        tokenId?: string;
        collection?: string;
        attributes?: string;
        user?: string;
        direction?: "from" | "to";
        type?: "sale" | "transfer";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTransfersResponse"];
      };
    };
  };
  getCollectionsCollection: {
    parameters: {
      path: {
        collection: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionResponse"];
      };
    };
  };
  getOrdersBuild: {
    parameters: {
      query: {
        contract?: string;
        tokenId?: string;
        collection?: string;
        maker: string;
        side: "sell" | "buy";
        price: string;
        fee: string;
        feeRecipient: string;
        listingTime?: string;
        expirationTime?: string;
        salt?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersBuildResponse"];
      };
    };
  };
  getOrdersFill: {
    parameters: {
      query: {
        tokenId: string;
        contract?: string;
        collection?: string;
        side?: "sell" | "buy";
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersFillResponse"];
      };
    };
  };
  getTokensDetails: {
    parameters: {
      query: {
        contract?: string;
        tokenId?: string;
        collection?: string;
        attributes?: string;
        tokenSetId?: string;
        onSale?: boolean;
        sortBy?: "tokenId" | "floorSellValue" | "topBuyValue";
        sortByAttribute?: string;
        sortDirection?: "asc" | "desc";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensDetailsResponse"];
      };
    };
  };
  getTokensFloor: {
    parameters: {
      query: {
        collection: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensFloorResponse"];
      };
    };
  };
  getCollectionsCollectionAttributes: {
    parameters: {
      path: {
        collection: string;
      };
      query: {
        attribute?: string;
        onSaleCount?: number;
        sortBy?: "value" | "floorSellValue" | "floorCap";
        sortDirection?: "asc" | "desc";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionAttributesResponse"];
      };
    };
  };
  getUsersUserCollections: {
    parameters: {
      path: {
        user: string;
      };
      query: {
        community?: string;
        collection?: string;
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserCollectionsResponse"];
      };
    };
  };
  getUsersUserPositions: {
    parameters: {
      path: {
        user: string;
      };
      query: {
        side: "buy" | "sell";
        status: "valid" | "invalid";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserPositionsResponse"];
      };
    };
  };
  getUsersUserTokens: {
    parameters: {
      path: {
        user: string;
      };
      query: {
        community?: string;
        collection?: string;
        hasOffer?: boolean;
        sortBy?: "acquiredAt" | "topBuyListingTime";
        sortDirection?: "asc" | "desc";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserTokensResponse"];
      };
    };
  };
  postAttributesRefresh: {
    parameters: {
      query: {
        contract: string;
        tokenId: string;
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminFixCache: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model32"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminIndexMetadata: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model33"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminSyncEvents: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model35"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
}

export interface external {}
