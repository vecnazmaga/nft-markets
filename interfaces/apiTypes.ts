/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/attributes': {
    get: operations['getAttributes']
  }
  '/collections': {
    get: operations['getCollections']
  }
  '/market': {
    get: operations['getMarket']
  }
  '/orders': {
    get: operations['getOrders']
    post: operations['postOrders']
  }
  '/owners': {
    get: operations['getOwners']
  }
  '/sales': {
    get: operations['getSales']
  }
  '/stats': {
    get: operations['getStats']
  }
  '/tokens': {
    get: operations['getTokens']
  }
  '/transfers': {
    get: operations['getTransfers']
  }
  '/collections/{collection}': {
    get: operations['getCollectionsCollection']
  }
  '/liquidity/collections': {
    get: operations['getLiquidityCollections']
  }
  '/liquidity/users': {
    get: operations['getLiquidityUsers']
  }
  '/orders/build': {
    get: operations['getOrdersBuild']
  }
  '/orders/fill': {
    get: operations['getOrdersFill']
  }
  '/tokens/details': {
    get: operations['getTokensDetails']
  }
  '/tokens/floor': {
    get: operations['getTokensFloor']
  }
  '/collections/{collection}/top-buys': {
    get: operations['getCollectionsCollectionTopbuys']
  }
  '/collections/{collection}/attributes': {
    get: operations['getCollectionsCollectionAttributes']
  }
  '/users/{user}/tokens': {
    get: operations['getUsersUserTokens']
  }
  '/users/{user}/positions': {
    get: operations['getUsersUserPositions']
  }
  '/users/{user}/collections': {
    get: operations['getUsersUserCollections']
  }
  '/admin/contracts': {
    post: operations['postAdminContracts']
  }
  '/attributes/refresh': {
    post: operations['postAttributesRefresh']
  }
  '/admin/disable/orders': {
    post: operations['postAdminDisableOrders']
  }
  '/admin/fix/cache': {
    post: operations['postAdminFixCache']
  }
  '/admin/index/metadata': {
    post: operations['postAdminIndexMetadata']
  }
  '/admin/sync/events': {
    post: operations['postAdminSyncEvents']
  }
  '/admin/sync/orders': {
    post: operations['postAdminSyncOrders']
  }
  '/admin/index/metadata/fast': {
    post: operations['postAdminIndexMetadataFast']
  }
}

export interface definitions {
  Model1: {
    value?: string
    count?: number
  }
  values: definitions['Model1'][]
  Model2: {
    key?: string
    kind?: string
    values?: definitions['values']
  }
  attributes: definitions['Model2'][]
  getAttributesResponse: {
    attributes?: definitions['attributes']
  }
  collection: {
    id?: string
    name?: string
    description?: string
    image?: string
    tokenSetId?: string
  }
  royalties: {
    recipient?: string
    bps?: number
  }
  sampleImages: string[]
  lastBuy: {
    value?: number
    block?: number
  }
  token: {
    contract?: string
    tokenId?: string
    name?: string
    image?: string
  }
  floorSell: {
    hash?: string
    value?: number
    maker?: string
    validFrom?: number
    validUntil?: number
    token?: definitions['token']
  }
  topBuy: {
    hash?: string
    value?: number
    maker?: string
    validFrom?: number
    validUntil?: number
  }
  market: {
    floorSell?: definitions['floorSell']
    topBuy?: definitions['topBuy']
  }
  set: {
    tokenCount?: number
    onSaleCount?: number
    sampleImages?: definitions['sampleImages']
    lastBuy?: definitions['lastBuy']
    market?: definitions['market']
  }
  Model3: {
    collection?: definitions['collection']
    royalties?: definitions['royalties']
    set?: definitions['set']
  }
  collections: definitions['Model3'][]
  getCollectionsResponse: {
    collections?: definitions['collections']
  }
  Model4: {
    value?: number
    quantity?: number
  }
  buys: definitions['Model4'][]
  Model5: {
    buys?: definitions['buys']
    sells?: definitions['buys']
  }
  Model6: {
    market?: definitions['Model5']
  }
  data: { [key: string]: unknown }
  schema: {
    data?: definitions['data']
    kind?: string
  }
  metadata: {
    collectionName?: string
    tokenName?: string
  }
  sourceInfo: {
    id?: string
    bps?: number
  }
  royaltyInfo: definitions['royalties'][]
  Model7: {
    hash?: string
    status?: string
    tokenSetId?: string
    schema?: definitions['schema']
    metadata?: definitions['metadata']
    kind?: string
    side?: string
    maker?: string
    price?: number
    value?: number
    validFrom?: number
    validUntil?: number
    sourceInfo?: definitions['sourceInfo']
    royaltyInfo?: definitions['royaltyInfo']
    rawData?: definitions['data']
  }
  orders: definitions['Model7'][]
  getOrdersResponse: {
    orders?: definitions['orders']
  }
  ownership: {
    tokenCount?: number
    onSaleCount?: number
    floorSellValue?: number
    topBuyValue?: number
    totalBuyValue?: number
    lastAcquiredAt?: number
  }
  Model8: {
    address?: string
    ownership?: definitions['ownership']
  }
  owners: definitions['Model8'][]
  getOwnersResponse: {
    owners?: definitions['owners']
  }
  Model9: {
    id?: string
    name?: string
  }
  Model10: {
    contract?: string
    name?: string
    image?: string
    tokenId?: string
    collection?: definitions['Model9']
  }
  Model11: {
    token?: definitions['Model10']
    from?: string
    to?: string
    amount?: number
    txHash?: string
    block?: number
    timestamp?: number
    price?: number
    tokenSetId?: string
    schema?: string
  }
  sales: definitions['Model11'][]
  getSalesResponse: {
    sales?: definitions['sales']
  }
  getStatsResponse: {
    stats?: definitions['set']
  }
  Model12: {
    contract?: string
    name?: string
    image?: string
    tokenId?: string
    collection?: definitions['Model9']
    topBuyValue?: number
    floorSellValue?: number
  }
  tokens: definitions['Model12'][]
  getTokensResponse: {
    tokens?: definitions['tokens']
  }
  Model13: {
    token?: definitions['Model10']
    from?: string
    to?: string
    amount?: number
    txHash?: string
    block?: number
    timestamp?: number
    price?: number
  }
  transfers: definitions['Model13'][]
  getTransfersResponse: {
    transfers?: definitions['transfers']
  }
  Model14: {
    value?: number
    timestamp?: number
  }
  Model15: {
    id?: string
    name?: string
    description?: string
    image?: string
    tokenSetId?: string
    lastBuy?: definitions['Model14']
    lastSell?: definitions['Model14']
  }
  Model16: {
    collection?: definitions['Model15']
    royalties?: definitions['royalties']
    set?: definitions['set']
  }
  getCollectionResponse: {
    collection?: definitions['Model16']
  }
  Model17: {
    id?: string
    name?: string
    image?: string
  }
  Model18: {
    collection: definitions['Model17']
    tokenCount?: number
    liquidity?: number
    uniqueTopBuyers?: number
    topLiquidityProvider?: string
  }
  liquidity: definitions['Model18'][]
  getCollectionsLiquidityResponse: {
    liquidity?: definitions['liquidity']
  }
  Model19: {
    user?: string
    rank?: number
    tokenCount?: number
    liquidity?: number
    maxTopBuyValue?: number
    wethBalance?: number
  }
  Model20: definitions['Model19'][]
  getUsersLiquidityResponse: {
    liquidity?: definitions['Model20']
  }
  params: {
    exchange: string
    maker: string
    taker: string
    makerRelayerFee: number
    takerRelayerFee: number
    feeRecipient: string
    side: 0 | 1
    saleKind: 0 | 1
    target: string
    howToCall: 0 | 1
    calldata: string
    replacementPattern: string
    staticTarget: string
    staticExtradata: string
    paymentToken: string
    basePrice: string
    extra: string
    listingTime: number
    expirationTime: number
    salt: string
    v: number
    r: string
    s: string
  }
  order: {
    params?: definitions['params']
  }
  getOrdersBuildResponse: {
    order?: definitions['order']
  }
  Model21: {
    params?: definitions['params']
    buildMatchingArgs?: definitions['sampleImages']
  }
  getOrdersFillResponse: {
    order?: definitions['Model21']
  }
  Model22: {
    key?: string
    value?: string
  }
  Model23: definitions['Model22'][]
  Model24: {
    contract?: string
    kind?: string
    name?: string
    description?: string
    image?: string
    tokenId?: string
    collection?: definitions['Model9']
    lastBuy?: definitions['Model14']
    lastSell?: definitions['Model14']
    owner?: string
    attributes?: definitions['Model23']
  }
  Model25: {
    token?: definitions['Model24']
    market?: definitions['market']
  }
  Model26: definitions['Model25'][]
  getTokensDetailsResponse: {
    tokens?: definitions['Model26']
  }
  getTokensFloorResponse: {
    tokens?: {
      string?: number
    }
  }
  getCollectionTopBuysResponse: {
    topBuys?: definitions['buys']
  }
  lastSells: definitions['lastBuy'][]
  floorSellValues: number[]
  Model27: {
    hash?: string
    value?: number
    maker?: string
    validFrom?: number
  }
  Model28: {
    key?: string
    value?: string
    tokenCount?: number
    onSaleCount?: number
    sampleImages?: definitions['sampleImages']
    lastSells?: definitions['lastSells']
    lastBuys?: definitions['lastSells']
    floorSellValues?: definitions['floorSellValues']
    topBuy?: definitions['Model27']
  }
  Model29: definitions['Model28'][]
  getCollectionAttributesResponse: {
    attributes?: definitions['Model29']
  }
  Model30: {
    hash?: string
    value?: number
    schema?: string
  }
  Model31: {
    contract?: string
    name?: string
    image?: string
    tokenId?: string
    collection?: definitions['Model9']
    topBuy?: definitions['Model30']
  }
  Model32: {
    tokenCount?: number
    onSaleCount?: number
    floorSellValue?: number
    lastAcquiredAt?: number
  }
  Model33: {
    token?: definitions['Model31']
    ownership?: definitions['Model32']
  }
  Model34: definitions['Model33'][]
  getUserTokensResponse: {
    tokens?: definitions['Model34']
  }
  Model35: {
    id?: string
    schema?: string
    metadata?: string
    sampleImages?: definitions['sampleImages']
    image?: string
    floorSellValue?: number
    topBuyValue?: number
  }
  primaryOrder: {
    value?: number
    expiry?: number
    status?: string
  }
  Model36: {
    set?: definitions['Model35']
    primaryOrder?: definitions['primaryOrder']
    totalValid?: number
  }
  positions: definitions['Model36'][]
  getUserPositionsResponse: {
    positions?: definitions['positions']
  }
  Model37: {
    id?: string
    name?: string
    image?: string
    floorSellValue?: number
    topBuyValue?: number
  }
  Model38: {
    tokenCount?: number
    onSaleCount?: number
    liquidCount?: number
    lastAcquiredAt?: number
  }
  Model39: {
    collection?: definitions['Model37']
    ownership?: definitions['Model38']
  }
  Model40: definitions['Model39'][]
  getUserCollectionsResponse: {
    collections?: definitions['Model40']
  }
  attribute: {
    collection: string
    key: string
    value: string
  }
  Model41: {
    kind: 'wyvern-v2'
    data?: definitions['data']
    attribute?: definitions['attribute']
  }
  Model42: definitions['Model41'][]
  Model43: {
    orders?: definitions['Model42']
  }
  contracts: string[]
  Model44: {
    contracts?: definitions['contracts']
  }
  hashes: string[]
  Model45: {
    hashes?: definitions['hashes']
  }
  Model46: {
    kind?: 'tokens-floor-sell' | 'tokens-top-buy' | 'token-sets-top-buy'
    contracts?: definitions['contracts']
  }
  Model47: {
    collection: string
  }
  Model48: string[]
  Model49: {
    contractKind: 'erc20' | 'erc721' | 'erc1155' | 'wyvern-v2'
    contracts?: definitions['Model48']
    fromBlock: number
    toBlock: number
    blocksPerBatch?: number
  }
  Model50: {
    fromBlock: number
    toBlock: number
    blocksPerBatch?: number
  }
}

export interface operations {
  getAttributes: {
    parameters: {
      query: {
        collection: string
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getAttributesResponse']
      }
    }
  }
  getCollections: {
    parameters: {
      query: {
        community?: string
        collection?: string
        name?: string
        sortBy?: 'id' | 'floorCap'
        sortDirection?: 'asc' | 'desc'
        offset?: number
        limit?: number
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getCollectionsResponse']
      }
    }
  }
  getMarket: {
    parameters: {
      query: {
        contract?: string
        tokenId?: string
        collection?: string
        attributes?: string
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['Model6']
      }
    }
  }
  getOrders: {
    parameters: {
      query: {
        contract?: string
        tokenId?: string
        collection?: string
        attributeKey?: string
        attributeValue?: string
        maker?: string
        hash?: string
        includeInvalid?: boolean
        side?: 'sell' | 'buy'
        offset?: number
        limit?: number
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getOrdersResponse']
      }
    }
  }
  postOrders: {
    parameters: {
      body: {
        body?: definitions['Model43']
      }
    }
    responses: {
      /** Successful */
      default: {
        schema: string
      }
    }
  }
  getOwners: {
    parameters: {
      query: {
        contract?: string
        tokenId?: string
        collection?: string
        owner?: string
        attributes?: string
        offset?: number
        limit?: number
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getOwnersResponse']
      }
    }
  }
  getSales: {
    parameters: {
      query: {
        contract?: string
        tokenId?: string
        collection?: string
        attributes?: string
        user?: string
        direction?: 'from' | 'to'
        side?: 'buy' | 'sell'
        offset?: number
        limit?: number
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getSalesResponse']
      }
    }
  }
  getStats: {
    parameters: {
      query: {
        contract?: string
        tokenId?: string
        collection?: string
        attributes?: string
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getStatsResponse']
      }
    }
  }
  getTokens: {
    parameters: {
      query: {
        contract?: string
        tokenId?: string
        collection?: string
        attributes?: string
        tokenSetId?: string
        onSale?: boolean
        sortBy?: 'tokenId' | 'floorSellValue' | 'topBuyValue'
        sortByAttribute?: string
        sortDirection?: 'asc' | 'desc'
        offset?: number
        limit?: number
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getTokensResponse']
      }
    }
  }
  getTransfers: {
    parameters: {
      query: {
        contract?: string
        tokenId?: string
        collection?: string
        attributes?: string
        user?: string
        direction?: 'from' | 'to'
        offset?: number
        limit?: number
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getTransfersResponse']
      }
    }
  }
  getCollectionsCollection: {
    parameters: {
      path: {
        collection: string
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getCollectionResponse']
      }
    }
  }
  getLiquidityCollections: {
    parameters: {
      query: {
        offset?: number
        limit?: number
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getCollectionsLiquidityResponse']
      }
    }
  }
  getLiquidityUsers: {
    parameters: {
      query: {
        collection?: string
        user?: string
        offset?: number
        limit?: number
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getUsersLiquidityResponse']
      }
    }
  }
  getOrdersBuild: {
    parameters: {
      query: {
        contract?: string
        tokenId?: string
        collection?: string
        attributeKey?: string
        attributeValue?: string
        maker: string
        side: 'sell' | 'buy'
        price: string
        fee: string
        feeRecipient: string
        listingTime?: string
        expirationTime?: string
        salt?: string
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getOrdersBuildResponse']
      }
    }
  }
  getOrdersFill: {
    parameters: {
      query: {
        tokenId: string
        contract: string
        side?: 'sell' | 'buy'
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getOrdersFillResponse']
      }
    }
  }
  getTokensDetails: {
    parameters: {
      query: {
        contract?: string
        tokenId?: string
        collection?: string
        attributes?: string
        tokenSetId?: string
        onSale?: boolean
        sortBy?: 'tokenId' | 'floorSellValue' | 'topBuyValue'
        sortByAttribute?: string
        sortDirection?: 'asc' | 'desc'
        offset?: number
        limit?: number
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getTokensDetailsResponse']
      }
    }
  }
  getTokensFloor: {
    parameters: {
      query: {
        collection: string
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getTokensFloorResponse']
      }
    }
  }
  getCollectionsCollectionTopbuys: {
    parameters: {
      path: {
        collection: string
      }
      query: {
        attributes?: string
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getCollectionTopBuysResponse']
      }
    }
  }
  getCollectionsCollectionAttributes: {
    parameters: {
      path: {
        collection: string
      }
      query: {
        attribute?: string
        sortBy?: 'value' | 'floorSellValue' | 'floorCap' | 'topBuyValue'
        sortDirection?: 'asc' | 'desc'
        offset?: number
        limit?: number
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getCollectionAttributesResponse']
      }
    }
  }
  getUsersUserTokens: {
    parameters: {
      path: {
        user: string
      }
      query: {
        community?: string
        collection?: string
        hasOffer?: boolean
        sortBy?: 'acquiredAt' | 'topBuyValue'
        sortDirection?: 'asc' | 'desc'
        offset?: number
        limit?: number
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getUserTokensResponse']
      }
    }
  }
  getUsersUserPositions: {
    parameters: {
      path: {
        user: string
      }
      query: {
        side: 'buy' | 'sell'
        status: 'valid' | 'invalid'
        offset?: number
        limit?: number
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getUserPositionsResponse']
      }
    }
  }
  getUsersUserCollections: {
    parameters: {
      path: {
        user: string
      }
      query: {
        community?: string
        collection?: string
        offset?: number
        limit?: number
      }
    }
    responses: {
      /** Successful */
      200: {
        schema: definitions['getUserCollectionsResponse']
      }
    }
  }
  postAdminContracts: {
    parameters: {
      header: {
        'x-admin-api-key': string
      }
      body: {
        body?: definitions['Model44']
      }
    }
    responses: {
      /** Successful */
      default: {
        schema: string
      }
    }
  }
  postAttributesRefresh: {
    parameters: {
      query: {
        contract: string
        tokenId: string
      }
    }
    responses: {
      /** Successful */
      default: {
        schema: string
      }
    }
  }
  postAdminDisableOrders: {
    parameters: {
      header: {
        'x-admin-api-key': string
      }
      body: {
        body?: definitions['Model45']
      }
    }
    responses: {
      /** Successful */
      default: {
        schema: string
      }
    }
  }
  postAdminFixCache: {
    parameters: {
      header: {
        'x-admin-api-key': string
      }
      body: {
        body?: definitions['Model46']
      }
    }
    responses: {
      /** Successful */
      default: {
        schema: string
      }
    }
  }
  postAdminIndexMetadata: {
    parameters: {
      header: {
        'x-admin-api-key': string
      }
      body: {
        body?: definitions['Model47']
      }
    }
    responses: {
      /** Successful */
      default: {
        schema: string
      }
    }
  }
  postAdminSyncEvents: {
    parameters: {
      header: {
        'x-admin-api-key': string
      }
      body: {
        body?: definitions['Model49']
      }
    }
    responses: {
      /** Successful */
      default: {
        schema: string
      }
    }
  }
  postAdminSyncOrders: {
    parameters: {
      header: {
        'x-admin-api-key': string
      }
      body: {
        body?: definitions['Model50']
      }
    }
    responses: {
      /** Successful */
      default: {
        schema: string
      }
    }
  }
  postAdminIndexMetadataFast: {
    parameters: {
      header: {
        'x-admin-api-key': string
      }
      body: {
        body?: definitions['Model47']
      }
    }
    responses: {
      /** Successful */
      default: {
        schema: string
      }
    }
  }
}

export interface external {}
